bl_info = {
    "name" : "Wheat Generator",
    "author" : "Elijah Mickelson",
    "version" : (1.3),
    "blender" : (4.1),
    "location" : "View3d > Wheat",
    "warning" : "",
    "wiki_url" : "",
    "category" : ""
}

import bpy
import random
from mathutils import Vector

wheat_list = []
wheat_model = bpy.data.objects["wheat"]
        
# Maps the name of each modifier to its actual identity in geo nodes modifier
modifier_inputs = {
    "Premise" : "Socket_6",
    "Rule 1 L" : "Socket_7",
    "Rule 1 R" : "Socket_8",
    "Rule 2 L" : "Socket_16",
    "Rule 2 R" : "Socket_17",
    "Rule 3 L" : "Socket_18",
    "Rule 3 R" : "Socket_19",
    
    "Iterations" : "Socket_9",
    "Angle" : "Socket_12",
    "Length" : "Socket_14",
    "Leaf Rate" : "Socket_20",
    
    "Wheat Head" : "Socket_27",
    "Wheat Head Material" : "Socket_29",
    "Leaf Model 0" : "Socket_28",
    "Leaf Model 1" : "Socket_32",
    "Leaf Model 2" : "Socket_33",
    "Leaf Material" : "Socket_30",
    "Stem Material" : "Socket_31",
    
    "Position" : "Socket_9",
    "Direction" : "Socket_10",
    "Up" : "Socket_15"
    }


# Add an object with a given name to the wheats list
def add_wheat_to_list(wheat):
    if type(wheat) == type("string"):
        wheat_list.append(bpy.data.objects[wheat])
    else:
        wheat_list.append(wheat)


# Using the modifier_inputs dictionary and a given name,
# get the socket number in the wheat modifiers
def get_socket(name):
    return modifier_inputs[name]

# Reload object with updated modifiers (always call after changing modifiers)
def update(ob):
    modifier = ob.modifiers["GeometryNodes"]
    modifier.node_group.interface_update(bpy.context)

# Update the information for a given geometry nodes socket
def set_modifier(obj, mod_name, new):
    mod_socket = get_socket(mod_name)
    obj.modifiers["GeometryNodes"][mod_socket] = new
    update(obj)

# Use a preset dictionary to set several different geonodes sockets at the same time
def set_modifiers(obj, preset):
    for key in preset.keys():
        set_modifier(obj, key, preset[key])

wheat_preset = {
    "Premise" : "S",
    "Rule 1 L" : "S",
    "Rule 1 R" : "FAFW",
    "Rule 2 L" : "A",
    "Rule 2 R" : "-FLA",
    "Rule 3 L" : "",
    "Rule 3 R" : ""
    }

set_modifiers(wheat_model, wheat_preset)

# Create a new wheat instance by duplicating the first one
def generate_wheat(position):
    # Make a name
    global wheat_list
    name = "wheat " + str(len(wheat_list))
    
    # Instantiate object
    new_wheat = bpy.data.objects.new(name=name, object_data = wheat_model.data)
    
    # Apply the geometry nodes modifier from the original wheat
    source = wheat_model
    target = new_wheat
    modifier_name = "GeometryNodes"
    with bpy.context.temp_override(object=source, selected_objects=(source, target)):
        bpy.ops.object.modifier_copy_to_selected(modifier=modifier_name) 
    
    # Update location
    new_wheat.location = position
    
    # Link to wheats collection
    bpy.data.collections["wheats"].objects.link(new_wheat)
    
    # Add to wheat list
    wheat_list.append(new_wheat)

generate_wheat((random.randint(-4,4), random.randint(-4,4), 0))


class PlaceWheatUI(bpy.types.Panel):
    bl_label = "Place Wheat Panel"
    bl_idname = "PT_PlaceWheatPanel"
    bl_space_type = "VIEW_3D"
    bl_region_type = "UI"
    bl_category = "Wheat"
    
    def draw(self, context):
        layout = self.layout
        
        row = layout.row()
        row.label(text="Place Wheat", icon = "ADD")
        row = layout.row()
        row.operator("mesh.primitive_cube_add")
        
    def execute(
        
def register():
    bpy.utils.register_class(PlaceWheatUI)
def unregister():
    bpy.utils.unregister_class(PlaceWheatUI)
    
if __name__ == "__main__":
    register()